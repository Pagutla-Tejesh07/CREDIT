# -*- coding: utf-8 -*-
"""credit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uz3gx6Fi8FKdqYDJrDEneSjTsHCmeA1v
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('creditcard.csv')

# Display the first few rows of the dataset
print("First few rows of the dataset:\n", df.head())

# Data Info: Check for null values, data types, and memory usage
print("\nData Info:\n")
df.info()

# Descriptive statistics
print("\nDescriptive Statistics:\n", df.describe())

# Check for missing values
print("\nMissing values:\n", df.isnull().sum())

# Check for class distribution
print("\nClass Distribution:\n", df['Class'].value_counts())

# Visualize the class distribution
plt.figure(figsize=(6, 4))
sns.countplot(x='Class', data=df, palette='Set2')
plt.title('Class Distribution (0 = Non-Fraud, 1 = Fraud)')
plt.xlabel('Class')
plt.ylabel('Count')
plt.show()

# Distribution of the 'Amount' feature
plt.figure(figsize=(10, 6))
sns.histplot(df['Amount'], bins=50, color='blue', kde=True)
plt.title('Distribution of Transaction Amounts')
plt.xlabel('Amount')
plt.ylabel('Frequency')
plt.show()

# Visualize the correlation heatmap of the features
# Compute the correlation matrix
correlation_matrix = df.corr()

# Create a heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=False, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap of Features')
plt.show()

# Check for outliers in the 'Amount' column using boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df['Amount'], color='orange')
plt.title('Boxplot of Transaction Amount')
plt.xlabel('Amount')
plt.show()

# Check for outliers in the 'V1' to 'V28' features using boxplot
plt.figure(figsize=(12, 8))
sns.boxplot(data=df.drop(columns=['Time', 'Class']), palette='Set2', width=0.5)
plt.title('Boxplot of Features (V1 to V28)')
plt.xticks(rotation=90)
plt.show()

# Distribution of the features V1, V2, ..., V28 (first 5 for simplicity)
df_features = df.iloc[:, 1:6]  # Get the first 5 features for visualization

# Visualize the distribution of first few features (V1 to V5)
df_features.hist(figsize=(12, 8), bins=30, color='green', edgecolor='black')
plt.suptitle('Feature Distributions (V1 to V5)', fontsize=14)
plt.show()

# Checking the distribution of the 'Time' feature (time difference of transactions)
plt.figure(figsize=(10, 6))
sns.histplot(df['Time'], bins=50, color='purple', kde=True)
plt.title('Distribution of Time between Transactions')
plt.xlabel('Time')
plt.ylabel('Frequency')
plt.show()

# Checking the skewness of numerical columns
print("\nSkewness of Numerical Features:\n", df.skew())

# Visualizing Skewed Features (if any)
skewed_columns = df.select_dtypes(include=[np.number]).skew()
skewed_columns = skewed_columns[skewed_columns > 0.5].index

plt.figure(figsize=(12, 6))
for i, column in enumerate(skewed_columns):
    plt.subplot(2, len(skewed_columns)//2, i+1)
    sns.histplot(df[column], kde=True)
    plt.title(f'Distribution of {column}')

plt.tight_layout()
plt.show()